#!/usr/bin/env ruby

$LOAD_PATH << 'lib' << 'ext'

require 'readline'
require 'etc'
require 'optparse'
require 'rocket_launcher'

options = {}
parser = OptionParser.new do |opts|
  opts.banner = 'Usage: rl <options>'
  opts.separator ''
  opts.separator 'Controls an USB rocket launcher device.'
  opts.separator 'Valid commands are:' #{RocketLauncher::ACTIONS.keys.join(', ')}."

  opts.separator '  down : moves the turret down. Accept a time param in seconds. (down 0.5)'
  opts.separator '    up : moves the turret up. Accept a time param. (up 0.5)'
  opts.separator '  left : turns the turret to the left. Accept a time param. (left 3)'
  opts.separator ' right : turns the turret to the right. Accept a time param. (right 3)'
  opts.separator '  fire : shots a missile. (fire)'
  opts.separator '  stop : interrupt current action. (stop)'
  opts.separator '  park : moves the turret to the start position. (park)'
  opts.separator ''

  opts.separator 'Options:'
  opts.on('-c', '--command COMMAND', 'Command to execute') do |c|
    options[:c] = c
  end
  opts.on('-p', '--param PARAM', Float, 'A command parameter') do |p|
    options[:p] = p
  end
  opts.on('-f', '--file COMMAND_LIST', 'Load a list of commands by specific file') do |f|
    options[:f] = f
  end
  opts.on('-i', '--iterative', 'Open a command console') do |i|
    options[:i] = i
  end
  opts.on_tail('-v', '--version', 'Print version') { puts RocketLauncher::VERSION; exit }
  opts.on_tail('-h', '--help', 'Show this help') { puts opts; exit }
end
begin
  parser.parse!(ARGV)
rescue => e
  puts parser.help; exit
end
if ARGV.size > 0
  puts parser.help; exit
end
if options[:c] && !RocketLauncher::ACTIONS.keys.include?(options[:c].downcase.to_sym)
  puts 'Invalid command'; exit
end

def run_commands(rl, commands)
  commands.each do |command|
    c, param = command.split(/\s+/)
    puts "#{c} #{param}"
    begin
      if param && RocketLauncher.instance_method(c).parameters.first.size == 2
        rl.send(c, param.to_f)
      else
        rl.send(c)
      end
    rescue NoMethodError, NameError
      puts 'Invalid command'
    end
  end
end

# OK START

if options[:i]
  rl = RocketLauncher.new
  loop do
    begin
      line = Readline::readline("#{Etc.getlogin}@rocket_launcher> ")
      break if line.nil? || line == 'quit'
      Readline::HISTORY.push(line)
      commands = line.split(/,\s*/)
      run_commands(rl, commands)
    rescue Interrupt => e
      rl.stop
    end
  end
  rl.close
elsif options[:f]
  rl = RocketLauncher.new
  data = File.open(options[:f]).read
  run_commands(rl, data.lines)
  rl.close
elsif options[:c]
  rl = RocketLauncher.new
  if options[:p] && rl.method(options[:c]).arity == 2
    rl.send(options[:c], options[:p])
  else
    rl.send(options[:c])
  end
  rl.close
else
  puts parser.help; exit
end
